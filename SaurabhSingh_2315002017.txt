GEN AI ASSIGNMENT-1

Task- Download Images from: https://www.kaggle.com/datasets/berlinsweird/devanagari
and load the data in your notebook, then apply a cnn on the dataset to classify hindiÂ characters

Solution-

import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import cv2

# Set data path
DATA_DIR = "path_to_extracted_folder/devanagari/train"

# Load images and labels
image_size = 32  # All images are 32x32

X = []
y = []
class_names = sorted(os.listdir(DATA_DIR))

for idx, class_name in enumerate(class_names):
    class_path = os.path.join(DATA_DIR, class_name)
    for img_name in os.listdir(class_path):
        img_path = os.path.join(class_path, img_name)
        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        img = cv2.resize(img, (image_size, image_size))
        X.append(img)
        y.append(idx)

X = np.array(X).reshape(-1, image_size, image_size, 1) / 255.0
y = to_categorical(y)

# Train-test split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(32,32,1)),
    MaxPooling2D(2,2),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(len(class_names), activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val), batch_size=64)

loss, accuracy = model.evaluate(X_val, y_val)
print(f"Validation Accuracy: {accuracy*100:.2f}%")

plt.imshow(X_val[0].reshape(32, 32), cmap='gray')
plt.title(f"True Label: {class_names[np.argmax(y_val[0])]}")
plt.show()

pred = model.predict(X_val[0:1])
print("Predicted Class:", class_names[np.argmax(pred)])

plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.title('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.legend()
plt.show()